/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ShortExecutorInterface extends utils.Interface {
  functions: {
    "GRACE_PERIOD()": FunctionFragment;
    "MAXIMUM_DELAY()": FunctionFragment;
    "MINIMUM_DELAY()": FunctionFragment;
    "MINIMUM_QUORUM()": FunctionFragment;
    "ONE_HUNDRED_WITH_PRECISION()": FunctionFragment;
    "PROPOSITION_THRESHOLD()": FunctionFragment;
    "VOTE_DIFFERENTIAL()": FunctionFragment;
    "VOTING_DURATION()": FunctionFragment;
    "acceptAdmin()": FunctionFragment;
    "cancelTransaction(address,uint256,string,bytes,uint256,bool)": FunctionFragment;
    "executeTransaction(address,uint256,string,bytes,uint256,bool)": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "getDelay()": FunctionFragment;
    "getMinimumPropositionPowerNeeded(address,uint256)": FunctionFragment;
    "getMinimumVotingPowerNeeded(uint256)": FunctionFragment;
    "getPendingAdmin()": FunctionFragment;
    "isActionQueued(bytes32)": FunctionFragment;
    "isProposalOverGracePeriod(address,uint256)": FunctionFragment;
    "isProposalPassed(address,uint256)": FunctionFragment;
    "isPropositionPowerEnough(address,address,uint256)": FunctionFragment;
    "isQuorumValid(address,uint256)": FunctionFragment;
    "isVoteDifferentialValid(address,uint256)": FunctionFragment;
    "queueTransaction(address,uint256,string,bytes,uint256,bool)": FunctionFragment;
    "setDelay(uint256)": FunctionFragment;
    "setPendingAdmin(address)": FunctionFragment;
    "validateCreatorOfProposal(address,address,uint256)": FunctionFragment;
    "validateProposalCancellation(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "GRACE_PERIOD"
      | "MAXIMUM_DELAY"
      | "MINIMUM_DELAY"
      | "MINIMUM_QUORUM"
      | "ONE_HUNDRED_WITH_PRECISION"
      | "PROPOSITION_THRESHOLD"
      | "VOTE_DIFFERENTIAL"
      | "VOTING_DURATION"
      | "acceptAdmin"
      | "cancelTransaction"
      | "executeTransaction"
      | "getAdmin"
      | "getDelay"
      | "getMinimumPropositionPowerNeeded"
      | "getMinimumVotingPowerNeeded"
      | "getPendingAdmin"
      | "isActionQueued"
      | "isProposalOverGracePeriod"
      | "isProposalPassed"
      | "isPropositionPowerEnough"
      | "isQuorumValid"
      | "isVoteDifferentialValid"
      | "queueTransaction"
      | "setDelay"
      | "setPendingAdmin"
      | "validateCreatorOfProposal"
      | "validateProposalCancellation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAXIMUM_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_QUORUM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_HUNDRED_WITH_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROPOSITION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTE_DIFFERENTIAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTING_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(functionFragment: "getDelay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMinimumPropositionPowerNeeded",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumVotingPowerNeeded",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isActionQueued",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isProposalOverGracePeriod",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isProposalPassed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPropositionPowerEnough",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isQuorumValid",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isVoteDifferentialValid",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "queueTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateCreatorOfProposal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateProposalCancellation",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAXIMUM_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_QUORUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_HUNDRED_WITH_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROPOSITION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_DIFFERENTIAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTING_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumPropositionPowerNeeded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumVotingPowerNeeded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActionQueued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProposalOverGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProposalPassed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPropositionPowerEnough",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isQuorumValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVoteDifferentialValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateCreatorOfProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateProposalCancellation",
    data: BytesLike
  ): Result;

  events: {
    "CancelledAction(bytes32,address,uint256,string,bytes,uint256,bool)": EventFragment;
    "ExecutedAction(bytes32,address,uint256,string,bytes,uint256,bool,bytes)": EventFragment;
    "NewAdmin(address)": EventFragment;
    "NewDelay(uint256)": EventFragment;
    "NewPendingAdmin(address)": EventFragment;
    "QueuedAction(bytes32,address,uint256,string,bytes,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelledAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutedAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDelay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QueuedAction"): EventFragment;
}

export interface CancelledActionEventObject {
  actionHash: string;
  target: string;
  value: BigNumber;
  signature: string;
  data: string;
  executionTime: BigNumber;
  withDelegatecall: boolean;
}
export type CancelledActionEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber, boolean],
  CancelledActionEventObject
>;

export type CancelledActionEventFilter = TypedEventFilter<CancelledActionEvent>;

export interface ExecutedActionEventObject {
  actionHash: string;
  target: string;
  value: BigNumber;
  signature: string;
  data: string;
  executionTime: BigNumber;
  withDelegatecall: boolean;
  resultData: string;
}
export type ExecutedActionEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber, boolean, string],
  ExecutedActionEventObject
>;

export type ExecutedActionEventFilter = TypedEventFilter<ExecutedActionEvent>;

export interface NewAdminEventObject {
  newAdmin: string;
}
export type NewAdminEvent = TypedEvent<[string], NewAdminEventObject>;

export type NewAdminEventFilter = TypedEventFilter<NewAdminEvent>;

export interface NewDelayEventObject {
  delay: BigNumber;
}
export type NewDelayEvent = TypedEvent<[BigNumber], NewDelayEventObject>;

export type NewDelayEventFilter = TypedEventFilter<NewDelayEvent>;

export interface NewPendingAdminEventObject {
  newPendingAdmin: string;
}
export type NewPendingAdminEvent = TypedEvent<
  [string],
  NewPendingAdminEventObject
>;

export type NewPendingAdminEventFilter = TypedEventFilter<NewPendingAdminEvent>;

export interface QueuedActionEventObject {
  actionHash: string;
  target: string;
  value: BigNumber;
  signature: string;
  data: string;
  executionTime: BigNumber;
  withDelegatecall: boolean;
}
export type QueuedActionEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber, boolean],
  QueuedActionEventObject
>;

export type QueuedActionEventFilter = TypedEventFilter<QueuedActionEvent>;

export interface ShortExecutor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ShortExecutorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAXIMUM_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMUM_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMUM_QUORUM(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_HUNDRED_WITH_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    PROPOSITION_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    VOTE_DIFFERENTIAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    VOTING_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      executionTime: PromiseOrValue<BigNumberish>,
      withDelegatecall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      executionTime: PromiseOrValue<BigNumberish>,
      withDelegatecall: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<[string]>;

    getDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinimumPropositionPowerNeeded(
      governance: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinimumVotingPowerNeeded(
      votingSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    isActionQueued(
      actionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isProposalOverGracePeriod(
      governance: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isProposalPassed(
      governance: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPropositionPowerEnough(
      governance: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isQuorumValid(
      governance: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isVoteDifferentialValid(
      governance: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    queueTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      executionTime: PromiseOrValue<BigNumberish>,
      withDelegatecall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelay(
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPendingAdmin(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateCreatorOfProposal(
      governance: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    validateProposalCancellation(
      governance: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  MAXIMUM_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_QUORUM(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_HUNDRED_WITH_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  PROPOSITION_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  VOTE_DIFFERENTIAL(overrides?: CallOverrides): Promise<BigNumber>;

  VOTING_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  acceptAdmin(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelTransaction(
    target: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    executionTime: PromiseOrValue<BigNumberish>,
    withDelegatecall: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeTransaction(
    target: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    executionTime: PromiseOrValue<BigNumberish>,
    withDelegatecall: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  getDelay(overrides?: CallOverrides): Promise<BigNumber>;

  getMinimumPropositionPowerNeeded(
    governance: PromiseOrValue<string>,
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinimumVotingPowerNeeded(
    votingSupply: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingAdmin(overrides?: CallOverrides): Promise<string>;

  isActionQueued(
    actionHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isProposalOverGracePeriod(
    governance: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isProposalPassed(
    governance: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPropositionPowerEnough(
    governance: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isQuorumValid(
    governance: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVoteDifferentialValid(
    governance: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  queueTransaction(
    target: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    executionTime: PromiseOrValue<BigNumberish>,
    withDelegatecall: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelay(
    delay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPendingAdmin(
    newPendingAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateCreatorOfProposal(
    governance: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  validateProposalCancellation(
    governance: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_QUORUM(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_HUNDRED_WITH_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    PROPOSITION_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_DIFFERENTIAL(overrides?: CallOverrides): Promise<BigNumber>;

    VOTING_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    acceptAdmin(overrides?: CallOverrides): Promise<void>;

    cancelTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      executionTime: PromiseOrValue<BigNumberish>,
      withDelegatecall: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    executeTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      executionTime: PromiseOrValue<BigNumberish>,
      withDelegatecall: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    getDelay(overrides?: CallOverrides): Promise<BigNumber>;

    getMinimumPropositionPowerNeeded(
      governance: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumVotingPowerNeeded(
      votingSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingAdmin(overrides?: CallOverrides): Promise<string>;

    isActionQueued(
      actionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isProposalOverGracePeriod(
      governance: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isProposalPassed(
      governance: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPropositionPowerEnough(
      governance: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isQuorumValid(
      governance: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVoteDifferentialValid(
      governance: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    queueTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      executionTime: PromiseOrValue<BigNumberish>,
      withDelegatecall: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    setDelay(
      delay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingAdmin(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateCreatorOfProposal(
      governance: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validateProposalCancellation(
      governance: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CancelledAction(bytes32,address,uint256,string,bytes,uint256,bool)"(
      actionHash?: null,
      target?: PromiseOrValue<string> | null,
      value?: null,
      signature?: null,
      data?: null,
      executionTime?: null,
      withDelegatecall?: null
    ): CancelledActionEventFilter;
    CancelledAction(
      actionHash?: null,
      target?: PromiseOrValue<string> | null,
      value?: null,
      signature?: null,
      data?: null,
      executionTime?: null,
      withDelegatecall?: null
    ): CancelledActionEventFilter;

    "ExecutedAction(bytes32,address,uint256,string,bytes,uint256,bool,bytes)"(
      actionHash?: null,
      target?: PromiseOrValue<string> | null,
      value?: null,
      signature?: null,
      data?: null,
      executionTime?: null,
      withDelegatecall?: null,
      resultData?: null
    ): ExecutedActionEventFilter;
    ExecutedAction(
      actionHash?: null,
      target?: PromiseOrValue<string> | null,
      value?: null,
      signature?: null,
      data?: null,
      executionTime?: null,
      withDelegatecall?: null,
      resultData?: null
    ): ExecutedActionEventFilter;

    "NewAdmin(address)"(newAdmin?: null): NewAdminEventFilter;
    NewAdmin(newAdmin?: null): NewAdminEventFilter;

    "NewDelay(uint256)"(delay?: null): NewDelayEventFilter;
    NewDelay(delay?: null): NewDelayEventFilter;

    "NewPendingAdmin(address)"(
      newPendingAdmin?: null
    ): NewPendingAdminEventFilter;
    NewPendingAdmin(newPendingAdmin?: null): NewPendingAdminEventFilter;

    "QueuedAction(bytes32,address,uint256,string,bytes,uint256,bool)"(
      actionHash?: null,
      target?: PromiseOrValue<string> | null,
      value?: null,
      signature?: null,
      data?: null,
      executionTime?: null,
      withDelegatecall?: null
    ): QueuedActionEventFilter;
    QueuedAction(
      actionHash?: null,
      target?: PromiseOrValue<string> | null,
      value?: null,
      signature?: null,
      data?: null,
      executionTime?: null,
      withDelegatecall?: null
    ): QueuedActionEventFilter;
  };

  estimateGas: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_QUORUM(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_HUNDRED_WITH_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    PROPOSITION_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_DIFFERENTIAL(overrides?: CallOverrides): Promise<BigNumber>;

    VOTING_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    acceptAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      executionTime: PromiseOrValue<BigNumberish>,
      withDelegatecall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      executionTime: PromiseOrValue<BigNumberish>,
      withDelegatecall: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    getDelay(overrides?: CallOverrides): Promise<BigNumber>;

    getMinimumPropositionPowerNeeded(
      governance: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumVotingPowerNeeded(
      votingSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    isActionQueued(
      actionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProposalOverGracePeriod(
      governance: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProposalPassed(
      governance: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPropositionPowerEnough(
      governance: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isQuorumValid(
      governance: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVoteDifferentialValid(
      governance: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queueTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      executionTime: PromiseOrValue<BigNumberish>,
      withDelegatecall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelay(
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPendingAdmin(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateCreatorOfProposal(
      governance: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateProposalCancellation(
      governance: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAXIMUM_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINIMUM_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINIMUM_QUORUM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_HUNDRED_WITH_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PROPOSITION_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VOTE_DIFFERENTIAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VOTING_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      executionTime: PromiseOrValue<BigNumberish>,
      withDelegatecall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      executionTime: PromiseOrValue<BigNumberish>,
      withDelegatecall: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinimumPropositionPowerNeeded(
      governance: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumVotingPowerNeeded(
      votingSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isActionQueued(
      actionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProposalOverGracePeriod(
      governance: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProposalPassed(
      governance: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPropositionPowerEnough(
      governance: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isQuorumValid(
      governance: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVoteDifferentialValid(
      governance: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queueTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      executionTime: PromiseOrValue<BigNumberish>,
      withDelegatecall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelay(
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPendingAdmin(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateCreatorOfProposal(
      governance: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateProposalCancellation(
      governance: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
