/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface VestingEscrowInterface extends utils.Interface {
  functions: {
    "cancelVesting()": FunctionFragment;
    "claim()": FunctionFragment;
    "delegateRegistry()": FunctionFragment;
    "factory()": FunctionFragment;
    "getClaimable()": FunctionFragment;
    "initialize(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "lastUpdate()": FunctionFragment;
    "owner()": FunctionFragment;
    "recipient()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "smClaimRewards(address,uint256)": FunctionFragment;
    "smCooldown()": FunctionFragment;
    "smRedeem(uint256)": FunctionFragment;
    "smStake(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vestingAmount()": FunctionFragment;
    "vestingBegin()": FunctionFragment;
    "vestingCliff()": FunctionFragment;
    "vestingEnd()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelVesting"
      | "claim"
      | "delegateRegistry"
      | "factory"
      | "getClaimable"
      | "initialize"
      | "lastUpdate"
      | "owner"
      | "recipient"
      | "renounceOwnership"
      | "smClaimRewards"
      | "smCooldown"
      | "smRedeem"
      | "smStake"
      | "token"
      | "transferOwnership"
      | "vestingAmount"
      | "vestingBegin"
      | "vestingCliff"
      | "vestingEnd"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelVesting",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getClaimable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "recipient", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "smClaimRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "smCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "smRedeem",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "smStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingBegin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingCliff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingEnd",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastUpdate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recipient", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "smClaimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "smCooldown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "smRedeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "smStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingBegin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingCliff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vestingEnd", data: BytesLike): Result;

  events: {
    "Claimed(address,uint256,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Removed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Removed"): EventFragment;
}

export interface ClaimedEventObject {
  token: string;
  amount: BigNumber;
  claimer: string;
  recipient: string;
}
export type ClaimedEvent = TypedEvent<
  [string, BigNumber, string, string],
  ClaimedEventObject
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RemovedEventObject {
  token: string;
  amount: BigNumber;
}
export type RemovedEvent = TypedEvent<[string, BigNumber], RemovedEventObject>;

export type RemovedEventFilter = TypedEventFilter<RemovedEvent>;

export interface VestingEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VestingEscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelVesting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delegateRegistry(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getClaimable(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      recipient_: PromiseOrValue<string>,
      vestingAmount_: PromiseOrValue<BigNumberish>,
      vestingBegin_: PromiseOrValue<BigNumberish>,
      vestingCliff_: PromiseOrValue<BigNumberish>,
      vestingEnd_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lastUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recipient(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    smClaimRewards(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    smCooldown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    smRedeem(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    smStake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vestingAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    vestingBegin(overrides?: CallOverrides): Promise<[BigNumber]>;

    vestingCliff(overrides?: CallOverrides): Promise<[BigNumber]>;

    vestingEnd(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  cancelVesting(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delegateRegistry(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  getClaimable(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    recipient_: PromiseOrValue<string>,
    vestingAmount_: PromiseOrValue<BigNumberish>,
    vestingBegin_: PromiseOrValue<BigNumberish>,
    vestingCliff_: PromiseOrValue<BigNumberish>,
    vestingEnd_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  recipient(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  smClaimRewards(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  smCooldown(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  smRedeem(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  smStake(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vestingAmount(overrides?: CallOverrides): Promise<BigNumber>;

  vestingBegin(overrides?: CallOverrides): Promise<BigNumber>;

  vestingCliff(overrides?: CallOverrides): Promise<BigNumber>;

  vestingEnd(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    cancelVesting(overrides?: CallOverrides): Promise<void>;

    claim(overrides?: CallOverrides): Promise<void>;

    delegateRegistry(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    getClaimable(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      recipient_: PromiseOrValue<string>,
      vestingAmount_: PromiseOrValue<BigNumberish>,
      vestingBegin_: PromiseOrValue<BigNumberish>,
      vestingCliff_: PromiseOrValue<BigNumberish>,
      vestingEnd_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    recipient(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    smClaimRewards(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    smCooldown(overrides?: CallOverrides): Promise<void>;

    smRedeem(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    smStake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vestingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    vestingBegin(overrides?: CallOverrides): Promise<BigNumber>;

    vestingCliff(overrides?: CallOverrides): Promise<BigNumber>;

    vestingEnd(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Claimed(address,uint256,address,address)"(
      token?: null,
      amount?: null,
      claimer?: null,
      recipient?: null
    ): ClaimedEventFilter;
    Claimed(
      token?: null,
      amount?: null,
      claimer?: null,
      recipient?: null
    ): ClaimedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Removed(address,uint256)"(token?: null, amount?: null): RemovedEventFilter;
    Removed(token?: null, amount?: null): RemovedEventFilter;
  };

  estimateGas: {
    cancelVesting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delegateRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimable(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      recipient_: PromiseOrValue<string>,
      vestingAmount_: PromiseOrValue<BigNumberish>,
      vestingBegin_: PromiseOrValue<BigNumberish>,
      vestingCliff_: PromiseOrValue<BigNumberish>,
      vestingEnd_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recipient(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    smClaimRewards(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    smCooldown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    smRedeem(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    smStake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vestingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    vestingBegin(overrides?: CallOverrides): Promise<BigNumber>;

    vestingCliff(overrides?: CallOverrides): Promise<BigNumber>;

    vestingEnd(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelVesting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delegateRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      recipient_: PromiseOrValue<string>,
      vestingAmount_: PromiseOrValue<BigNumberish>,
      vestingBegin_: PromiseOrValue<BigNumberish>,
      vestingCliff_: PromiseOrValue<BigNumberish>,
      vestingEnd_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lastUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    smClaimRewards(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    smCooldown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    smRedeem(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    smStake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vestingAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingBegin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingCliff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
