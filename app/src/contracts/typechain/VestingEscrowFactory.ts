/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace VestingEscrowFactory {
  export type EscrowDataStruct = {
    recipient: PromiseOrValue<string>;
    admin: PromiseOrValue<string>;
    vestingAmount: PromiseOrValue<BigNumberish>;
    vestingBegin: PromiseOrValue<BigNumberish>;
    vestingCliff: PromiseOrValue<BigNumberish>;
    vestingEnd: PromiseOrValue<BigNumberish>;
  };

  export type EscrowDataStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    recipient: string;
    admin: string;
    vestingAmount: BigNumber;
    vestingBegin: BigNumber;
    vestingCliff: BigNumber;
    vestingEnd: BigNumber;
  };

  export type UserPermitStruct = {
    deadline: PromiseOrValue<BigNumberish>;
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type UserPermitStructOutput = [BigNumber, number, string, string] & {
    deadline: BigNumber;
    v: number;
    r: string;
    s: string;
  };
}

export interface VestingEscrowFactoryInterface extends utils.Interface {
  functions: {
    "deployVestingEscrow((address,address,uint256,uint256,uint256,uint256),(uint256,uint8,bytes32,bytes32))": FunctionFragment;
    "deploymentTimestamp()": FunctionFragment;
    "implementation()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setStakedToken(address)": FunctionFragment;
    "stakedToken()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deployVestingEscrow"
      | "deploymentTimestamp"
      | "implementation"
      | "owner"
      | "renounceOwnership"
      | "setStakedToken"
      | "stakedToken"
      | "transferOwnership"
      | "upgradeTo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deployVestingEscrow",
    values: [
      VestingEscrowFactory.EscrowDataStruct,
      VestingEscrowFactory.UserPermitStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deploymentTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStakedToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployVestingEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploymentTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "StakedTokenSet(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "VestingEscrowCreated(address,address,address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakedTokenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestingEscrowCreated"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StakedTokenSetEventObject {
  stakedToken: string;
}
export type StakedTokenSetEvent = TypedEvent<
  [string],
  StakedTokenSetEventObject
>;

export type StakedTokenSetEventFilter = TypedEventFilter<StakedTokenSetEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface VestingEscrowCreatedEventObject {
  funder: string;
  token: string;
  recipient: string;
  admin: string;
  escrow: string;
  amount: BigNumber;
  vestingBegin: BigNumber;
  vestingCliff: BigNumber;
  vestingEnd: BigNumber;
}
export type VestingEscrowCreatedEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  VestingEscrowCreatedEventObject
>;

export type VestingEscrowCreatedEventFilter =
  TypedEventFilter<VestingEscrowCreatedEvent>;

export interface VestingEscrowFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VestingEscrowFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployVestingEscrow(
      escrowData: VestingEscrowFactory.EscrowDataStruct,
      userPermit: VestingEscrowFactory.UserPermitStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deploymentTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakedToken(
      stakedToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakedToken(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  deployVestingEscrow(
    escrowData: VestingEscrowFactory.EscrowDataStruct,
    userPermit: VestingEscrowFactory.UserPermitStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deploymentTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  implementation(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakedToken(
    stakedToken_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakedToken(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deployVestingEscrow(
      escrowData: VestingEscrowFactory.EscrowDataStruct,
      userPermit: VestingEscrowFactory.UserPermitStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    deploymentTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setStakedToken(
      stakedToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedToken(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "StakedTokenSet(address)"(
      stakedToken?: PromiseOrValue<string> | null
    ): StakedTokenSetEventFilter;
    StakedTokenSet(
      stakedToken?: PromiseOrValue<string> | null
    ): StakedTokenSetEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "VestingEscrowCreated(address,address,address,address,address,uint256,uint256,uint256,uint256)"(
      funder?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      admin?: null,
      escrow?: null,
      amount?: null,
      vestingBegin?: null,
      vestingCliff?: null,
      vestingEnd?: null
    ): VestingEscrowCreatedEventFilter;
    VestingEscrowCreated(
      funder?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      admin?: null,
      escrow?: null,
      amount?: null,
      vestingBegin?: null,
      vestingCliff?: null,
      vestingEnd?: null
    ): VestingEscrowCreatedEventFilter;
  };

  estimateGas: {
    deployVestingEscrow(
      escrowData: VestingEscrowFactory.EscrowDataStruct,
      userPermit: VestingEscrowFactory.UserPermitStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deploymentTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakedToken(
      stakedToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakedToken(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployVestingEscrow(
      escrowData: VestingEscrowFactory.EscrowDataStruct,
      userPermit: VestingEscrowFactory.UserPermitStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deploymentTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakedToken(
      stakedToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
